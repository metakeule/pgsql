{
  "Exports": {
    "*REST.Create": "(*REST) Create(github.com/metakeule/pgsql.DB,[]byte)(string,error)",
    "*REST.Delete": "(*REST) Delete(github.com/metakeule/pgsql.DB,string) error",
    "*REST.HandleCreate": "(*REST) HandleCreate(github.com/metakeule/pgsql.DB,*github.com/go-on/rack/router.Router,string) *github.com/go-on/rack/router.Route",
    "*REST.HandleDelete": "(*REST) HandleDelete(github.com/metakeule/pgsql.DB,*github.com/go-on/rack/router.Router,string) *github.com/go-on/rack/router.Route",
    "*REST.HandleList": "(*REST) HandleList(github.com/metakeule/pgsql.DB,*github.com/go-on/rack/router.Router,string,int) *github.com/go-on/rack/router.Route",
    "*REST.HandleRead": "(*REST) HandleRead(github.com/metakeule/pgsql.DB,*github.com/go-on/rack/router.Router,string) *github.com/go-on/rack/router.Route",
    "*REST.HandleUpdate": "(*REST) HandleUpdate(github.com/metakeule/pgsql.DB,*github.com/go-on/rack/router.Router,string) *github.com/go-on/rack/router.Route",
    "*REST.List": "(*REST) List(github.com/metakeule/pgsql.DB,int,...interface{})([]map[string]interface{},error)",
    "*REST.Read": "(*REST) Read(github.com/metakeule/pgsql.DB,string)(map[string]interface{},error)",
    "*REST.Update": "(*REST) Update(github.com/metakeule/pgsql.DB,string,[]byte) error",
    "ErrConflict": "_err{\"Conflict\", http.StatusConflict}",
    "ErrNotFound": "_err{\"Not found\", http.StatusNotFound}",
    "ErrServer": "_err{\"Internal Server Error\", http.StatusInternalServerError}",
    "NewREST": "func (interface{}) *REST",
    "REST": "type REST struct{}",
    "ValidationError": "type ValidationError map[string]string",
    "ValidationError.Error": "(ValidationError) Error() string",
    "ValidationError.MarshalJSON": "(ValidationError) MarshalJSON()([]byte,error)",
    "ValidationError.ServeHTTP": "(ValidationError) ServeHTTP(net/http.ResponseWriter,*net/http.Request)",
    "init": ""
  },
  "Imports": {
    "github.com/go-on/fat.*Field.Get": "(*Field) Get() interface{}",
    "github.com/go-on/fat.*Field.IsValid": "(*Field) IsValid() bool",
    "github.com/go-on/fat.*Field.MarshalJSON": "(*Field) MarshalJSON()([]byte,error)",
    "github.com/go-on/fat.*Field.MustScanAndValidate": "(*Field) MustScanAndValidate(string)",
    "github.com/go-on/fat.*Field.MustScanString": "(*Field) MustScanString(string)",
    "github.com/go-on/fat.*Field.MustSet": "(*Field) MustSet(interface{})",
    "github.com/go-on/fat.*Field.MustValidate": "(*Field) MustValidate()",
    "github.com/go-on/fat.*Field.Scan": "(*Field) Scan(interface{}) error",
    "github.com/go-on/fat.*Field.ScanAndValidate": "(*Field) ScanAndValidate(string) []error",
    "github.com/go-on/fat.*Field.ScanString": "(*Field) ScanString(string) error",
    "github.com/go-on/fat.*Field.Set": "(*Field) Set(interface{}) error",
    "github.com/go-on/fat.*Field.String": "(*Field) String() string",
    "github.com/go-on/fat.*Field.UnmarshalJSON": "(*Field) UnmarshalJSON([]byte) error",
    "github.com/go-on/fat.*Field.Validate": "(*Field) Validate() []error",
    "github.com/go-on/fat.*Field.Value": "(*Field) Value()(database/sql/driver.Value,error)",
    "github.com/go-on/fat.Bools": "func (...bool) *slice",
    "github.com/go-on/fat.Field": "type Field struct { Type; FailedScanInput string; IsSet bool; Struct interface{}}",
    "github.com/go-on/fat.Floats": "func (...float64) *slice",
    "github.com/go-on/fat.Ints": "func (...int64) *slice",
    "github.com/go-on/fat.New": "func (interface{},interface{}) interface{}",
    "github.com/go-on/fat.Strings": "func (...string) *slice",
    "github.com/go-on/fat.Times": "func (...time.Time) *slice",
    "github.com/go-on/fat.init": "",
    "github.com/go-on/rack/router.*Route.AddHandlerX": "(*Route) AddHandlerX(net/http.Handler,verb) error",
    "github.com/go-on/rack/router.*Route.Handler": "(*Route) Handler(string) net/http.Handler",
    "github.com/go-on/rack/router.*Route.Inspect": "(*Route) Inspect(int) string",
    "github.com/go-on/rack/router.*Router.DELETE": "(*Router) DELETE(string,net/http.Handler) *Route",
    "github.com/go-on/rack/router.*Router.GET": "(*Router) GET(string,net/http.Handler) *Route",
    "github.com/go-on/rack/router.*Router.Handle": "(*Router) Handle(string,verb,net/http.Handler)(*Route,error)",
    "github.com/go-on/rack/router.*Router.Mount": "(*Router) Mount(string,*net/http.ServeMux)(*MountedRouter,error)",
    "github.com/go-on/rack/router.*Router.MustHandle": "(*Router) MustHandle(string,verb,net/http.Handler) *Route",
    "github.com/go-on/rack/router.*Router.MustMount": "(*Router) MustMount(string,*net/http.ServeMux) *MountedRouter",
    "github.com/go-on/rack/router.*Router.OPTIONS": "(*Router) OPTIONS(string,net/http.Handler) *Route",
    "github.com/go-on/rack/router.*Router.PATCH": "(*Router) PATCH(string,net/http.Handler) *Route",
    "github.com/go-on/rack/router.*Router.POST": "(*Router) POST(string,net/http.Handler) *Route",
    "github.com/go-on/rack/router.*Router.PUT": "(*Router) PUT(string,net/http.Handler) *Route",
    "github.com/go-on/rack/router.*Router.ServeHTTP": "(*Router) ServeHTTP(net/http.ResponseWriter,*net/http.Request)",
    "github.com/go-on/rack/router.*Vars.Get": "(*Vars) Get(string) string",
    "github.com/go-on/rack/router.*Vars.Has": "(*Vars) Has(string) bool",
    "github.com/go-on/rack/router.*Vars.SetStruct": "(*Vars) SetStruct(interface{},string) error",
    "github.com/go-on/rack/router.Route": "type Route struct{}",
    "github.com/go-on/rack/router.Router": "type Router struct {NotFound net/http.Handler}",
    "github.com/go-on/rack/router.Vars": "type Vars struct { net/http.ResponseWriter}",
    "github.com/go-on/rack/router.init": "",
    "github.com/go-on/rack/wrapper.HandlerMethod": "func (interface{}) net/http.Handler",
    "github.com/go-on/rack/wrapper.init": "",
    "github.com/metakeule/fmtdate.Parse": "func (string,string)(time.Time,error)",
    "github.com/metakeule/fmtdate.init": "",
    "github.com/metakeule/meta.New": "func (reflect.Type) interface{}",
    "github.com/metakeule/meta.Struct": "struct_{meta{\"struct\", func(ø meta, i interface{}) bool { return ø.Is(reflect.Struct, i) }}}",
    "github.com/metakeule/meta.init": "",
    "github.com/metakeule/pgsql.*Field.Add": "(*Field) Add(...interface{})",
    "github.com/metakeule/pgsql.*Field.AddValidator": "(*Field) AddValidator(...FieldValidator)",
    "github.com/metakeule/pgsql.*Field.InSelection": "(*Field) InSelection(interface{}) bool",
    "github.com/metakeule/pgsql.*Field.Is": "(*Field) Is(flag) bool",
    "github.com/metakeule/pgsql.*Field.MustValue": "(*Field) MustValue(interface{}) *TypedValue",
    "github.com/metakeule/pgsql.*Field.Placeholder": "(*Field) Placeholder() Placeholder",
    "github.com/metakeule/pgsql.*Field.QueryField": "(*Field) QueryField() string",
    "github.com/metakeule/pgsql.*Field.SetQueryField": "(*Field) SetQueryField(string) *Field",
    "github.com/metakeule/pgsql.*Field.Sql": "(*Field) Sql() SqlType",
    "github.com/metakeule/pgsql.*Field.Validate": "(*Field) Validate(interface{}) error",
    "github.com/metakeule/pgsql.*Field.Value": "(*Field) Value(interface{})(*TypedValue,error)",
    "github.com/metakeule/pgsql.*Row.AliasValues": "(*Row) AliasValues() map[*AsStruct]interface{}",
    "github.com/metakeule/pgsql.*Row.Any": "(*Row) Any(...interface{})(*Row,error)",
    "github.com/metakeule/pgsql.*Row.AsStrings": "(*Row) AsStrings() map[string]string",
    "github.com/metakeule/pgsql.*Row.Begin": "(*Row) Begin()(*database/sql.Tx,error)",
    "github.com/metakeule/pgsql.*Row.Commit": "(*Row) Commit() error",
    "github.com/metakeule/pgsql.*Row.Delete": "(*Row) Delete() error",
    "github.com/metakeule/pgsql.*Row.Each": "(*Row) Each((*Row) error,...interface{}) error",
    "github.com/metakeule/pgsql.*Row.Exec": "(*Row) Exec(Query,...interface{})(database/sql.Result,error)",
    "github.com/metakeule/pgsql.*Row.Fill": "(*Row) Fill(map[string]interface{}) error",
    "github.com/metakeule/pgsql.*Row.Find": "(*Row) Find(...interface{})(*Rows,error)",
    "github.com/metakeule/pgsql.*Row.FindWithArgs": "(*Row) FindWithArgs([]interface{},...interface{})(*Rows,error)",
    "github.com/metakeule/pgsql.*Row.Get": "(*Row) Get(...interface{})",
    "github.com/metakeule/pgsql.*Row.GetString": "(*Row) GetString(interface{}) string",
    "github.com/metakeule/pgsql.*Row.GetStruct": "(*Row) GetStruct(string,interface{}) error",
    "github.com/metakeule/pgsql.*Row.HasId": "(*Row) HasId() bool",
    "github.com/metakeule/pgsql.*Row.Id": "(*Row) Id() []SqlType",
    "github.com/metakeule/pgsql.*Row.Insert": "(*Row) Insert() error",
    "github.com/metakeule/pgsql.*Row.InsertQuery": "(*Row) InsertQuery() Query",
    "github.com/metakeule/pgsql.*Row.IsValid": "(*Row) IsValid(string,interface{}) bool",
    "github.com/metakeule/pgsql.*Row.Load": "(*Row) Load(...string) error",
    "github.com/metakeule/pgsql.*Row.LoadStruct": "(*Row) LoadStruct(string,interface{},...string) error",
    "github.com/metakeule/pgsql.*Row.Prepare": "(*Row) Prepare(Query)(*database/sql.Stmt,error)",
    "github.com/metakeule/pgsql.*Row.Properties": "(*Row) Properties() map[string]interface{}",
    "github.com/metakeule/pgsql.*Row.Query": "(*Row) Query(Query,...interface{})(*database/sql.Rows,error)",
    "github.com/metakeule/pgsql.*Row.QueryRow": "(*Row) QueryRow(Query,...interface{}) *database/sql.Row",
    "github.com/metakeule/pgsql.*Row.Reload": "(*Row) Reload() error",
    "github.com/metakeule/pgsql.*Row.Reset": "(*Row) Reset()",
    "github.com/metakeule/pgsql.*Row.Result": "(*Row) Result(string,interface{},...interface{}) error",
    "github.com/metakeule/pgsql.*Row.Rollback": "(*Row) Rollback() error",
    "github.com/metakeule/pgsql.*Row.Save": "(*Row) Save() error",
    "github.com/metakeule/pgsql.*Row.Scan": "(*Row) Scan(*database/sql.Rows,...interface{}) error",
    "github.com/metakeule/pgsql.*Row.Select": "(*Row) Select(...interface{})(*database/sql.Rows,error)",
    "github.com/metakeule/pgsql.*Row.SelectByStruct": "(*Row) SelectByStruct(interface{},string,...interface{}) error",
    "github.com/metakeule/pgsql.*Row.SelectByStructs": "(*Row) SelectByStructs(interface{},string,...interface{})(int,error)",
    "github.com/metakeule/pgsql.*Row.SelectQuery": "(*Row) SelectQuery(...interface{}) *SelectQuery",
    "github.com/metakeule/pgsql.*Row.Set": "(*Row) Set(...interface{}) error",
    "github.com/metakeule/pgsql.*Row.SetDB": "(*Row) SetDB(DB)",
    "github.com/metakeule/pgsql.*Row.SetDebug": "(*Row) SetDebug() *Row",
    "github.com/metakeule/pgsql.*Row.SetId": "(*Row) SetId(...string) error",
    "github.com/metakeule/pgsql.*Row.SetNull": "(*Row) SetNull(*Field)",
    "github.com/metakeule/pgsql.*Row.SetTransaction": "(*Row) SetTransaction(*database/sql.Tx)",
    "github.com/metakeule/pgsql.*Row.Unset": "(*Row) Unset(...*Field)",
    "github.com/metakeule/pgsql.*Row.UnsetDebug": "(*Row) UnsetDebug() *Row",
    "github.com/metakeule/pgsql.*Row.Update": "(*Row) Update(...interface{}) error",
    "github.com/metakeule/pgsql.*Row.UpdateQuery": "(*Row) UpdateQuery(...interface{}) Query",
    "github.com/metakeule/pgsql.*Row.Validate": "(*Row) Validate() error",
    "github.com/metakeule/pgsql.*Row.ValidateAll": "(*Row) ValidateAll() map[Sqler]error",
    "github.com/metakeule/pgsql.*Row.Values": "(*Row) Values() map[*Field]interface{}",
    "github.com/metakeule/pgsql.*Rows.ScanRow": "(*Rows) ScanRow()(*Row,error)",
    "github.com/metakeule/pgsql.*Rows.ScanStruct": "(*Rows) ScanStruct(string,interface{}) error",
    "github.com/metakeule/pgsql.*Table.AddField": "(*Table) AddField(...*Field)",
    "github.com/metakeule/pgsql.*Table.AddUnique": "(*Table) AddUnique(string,...*Field)",
    "github.com/metakeule/pgsql.*Table.AddValidator": "(*Table) AddValidator(...RowValidator)",
    "github.com/metakeule/pgsql.*Table.Create": "(*Table) Create() SqlType",
    "github.com/metakeule/pgsql.*Table.Drop": "(*Table) Drop() SqlType",
    "github.com/metakeule/pgsql.*Table.Field": "(*Table) Field(string) *Field",
    "github.com/metakeule/pgsql.*Table.IsPrimaryKey": "(*Table) IsPrimaryKey(*Field) bool",
    "github.com/metakeule/pgsql.*Table.NewField": "(*Table) NewField(string,...interface{}) *Field",
    "github.com/metakeule/pgsql.*Table.QueryField": "(*Table) QueryField(string) *Field",
    "github.com/metakeule/pgsql.*Table.Sql": "(*Table) Sql() SqlType",
    "github.com/metakeule/pgsql.*Table.Validate": "(*Table) Validate(map[*Field]interface{}) map[Sqler]error",
    "github.com/metakeule/pgsql.DB": "type DB interface {Begin()(*database/sql.Tx,error); Close() error; RowDB}",
    "github.com/metakeule/pgsql.Equals": "func (interface{},interface{}) *Comparer",
    "github.com/metakeule/pgsql.Field": "type Field struct {Default Sqler; ForeignKey *Field; Name string; Selection SelectionArray; Table *Table; Type Type; Validations []FieldValidator}",
    "github.com/metakeule/pgsql.Limit": "type Limit int",
    "github.com/metakeule/pgsql.Limit.Sql": "(Limit) Sql() SqlType",
    "github.com/metakeule/pgsql.NewRow": "func (RowDB,*Table,...interface{}) *Row",
    "github.com/metakeule/pgsql.Row": "type Row struct { *Table; DB DB; Debug bool; LastSql string; PostDelete []PostDelete; PostGet []PostGet; PostInsert []PostInsert; PostUpdate []PostUpdate; PostValidate []PostValidate; PreDelete []PreDelete; PreGet []PreGet; PreInsert []PreInsert; PreUpdate []PreUpdate; PreValidate []PreValidate; Tx *database/sql.Tx}",
    "github.com/metakeule/pgsql.Rows": "type Rows struct { *database/sql.Rows; Fields []interface{}}",
    "github.com/metakeule/pgsql.Table": "type Table struct {Constraints []Sqler; Fields []*Field; Name string; PrimaryKey []*Field; Schema *Schema; Validations []RowValidator}",
    "github.com/metakeule/pgsql.TableOf": "func (interface{}) *Table",
    "github.com/metakeule/pgsql.Where": "func (Sqler) *WhereStruct",
    "github.com/metakeule/pgsql.WhereStruct": "type WhereStruct struct {Inner Sqler}",
    "github.com/metakeule/pgsql.WhereStruct.Sql": "(WhereStruct) Sql() SqlType",
    "github.com/metakeule/pgsql.init": ""
  },
  "Path": "github.com/metakeule/pgsql/rest"
}
